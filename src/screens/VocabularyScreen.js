import React, { useState, useRef } from 'react';
import {
  View,
  FlatList,
  StyleSheet,
  Platform,
  Animated,
} from 'react-native';
import {
  Text,
  Surface,
  useTheme,
  Searchbar,
  Card,
  Chip,
} from 'react-native-paper';
import AnimatedHeader from '../components/AnimatedHeader';

// –°–ª–æ–≤–∞—Ä—å —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∞—Ä–∞–±—Å–∫–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
const vocabularyData = [
  { id: 1, arabic: 'ŸÉÿ™ÿßÿ®', transcription: 'kitƒÅb', russian: '–∫–Ω–∏–≥–∞', category: '–ø—Ä–µ–¥–º–µ—Ç—ã' },
  { id: 2, arabic: 'ÿ®Ÿäÿ™', transcription: 'bayt', russian: '–¥–æ–º', category: '–º–µ—Å—Ç–∞' },
  { id: 3, arabic: 'ŸÖÿπŸÑŸÖ', transcription: 'mu øallim', russian: '—É—á–∏—Ç–µ–ª—å', category: '–ø—Ä–æ—Ñ–µ—Å—Å–∏–∏' },
  { id: 4, arabic: 'ÿ∑ÿßŸÑÿ®', transcription: '·π≠ƒÅlib', russian: '—Å—Ç—É–¥–µ–Ω—Ç', category: '–ø—Ä–æ—Ñ–µ—Å—Å–∏–∏' },
  { id: 5, arabic: 'ŸÖÿßÿ°', transcription: 'mƒÅ æ', russian: '–≤–æ–¥–∞', category: '–µ–¥–∞' },
  { id: 6, arabic: 'ÿ∑ÿπÿßŸÖ', transcription: '·π≠a øƒÅm', russian: '–µ–¥–∞', category: '–µ–¥–∞' },
  { id: 7, arabic: 'ŸÖÿØÿ±ÿ≥ÿ©', transcription: 'madrasa', russian: '—à–∫–æ–ª–∞', category: '–º–µ—Å—Ç–∞' },
  { id: 8, arabic: 'ÿ≥ŸàŸÇ', transcription: 's≈´q', russian: '—Ä—ã–Ω–æ–∫', category: '–º–µ—Å—Ç–∞' },
  { id: 9, arabic: 'ŸÉÿ®Ÿäÿ±', transcription: 'kabƒ´r', russian: '–±–æ–ª—å—à–æ–π', category: '–ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ' },
  { id: 10, arabic: 'ÿµÿ∫Ÿäÿ±', transcription: '·π£aghƒ´r', russian: '–º–∞–ª–µ–Ω—å–∫–∏–π', category: '–ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ' },
  { id: 11, arabic: 'ÿ¨ŸÖŸäŸÑ', transcription: 'jamƒ´l', russian: '–∫—Ä–∞—Å–∏–≤—ã–π', category: '–ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ' },
  { id: 12, arabic: 'ÿ∑Ÿäÿ®', transcription: '·π≠ayyib', russian: '–¥–æ–±—Ä—ã–π', category: '–ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ' },
  { id: 13, arabic: 'ÿßÿ≥ŸÖ', transcription: 'ism', russian: '–∏–º—è', category: '–æ—Å–Ω–æ–≤–Ω—ã–µ' },
  { id: 14, arabic: 'ÿ±ŸäÿßŸÑ', transcription: 'riyƒÅl', russian: '—Ä–∏–∞–ª', category: '–¥–µ–Ω—å–≥–∏' },
  { id: 15, arabic: 'ÿ£ÿ±ÿ≤', transcription: 'aruzz', russian: '—Ä–∏—Å', category: '–µ–¥–∞' },
  { id: 16, arabic: 'ŸÑÿ≠ŸÖ', transcription: 'la·∏•m', russian: '–º—è—Å–æ', category: '–µ–¥–∞' },
  { id: 17, arabic: 'ŸÖŸÉÿ™ÿ®ÿ©', transcription: 'maktaba', russian: '–±–∏–±–ª–∏–æ—Ç–µ–∫–∞', category: '–º–µ—Å—Ç–∞' },
  { id: 18, arabic: 'ÿ¥ÿßÿ±ÿπ', transcription: 'shƒÅri ø', russian: '—É–ª–∏—Ü–∞', category: '–º–µ—Å—Ç–∞' },
  { id: 19, arabic: 'ÿ™ÿßÿ±ŸäÿÆ', transcription: 'tƒÅrƒ´kh', russian: '–∏—Å—Ç–æ—Ä–∏—è', category: '–Ω–∞—É–∫–∞' },
  { id: 20, arabic: 'ÿ¨ŸäÿØ', transcription: 'jayyid', russian: '—Ö–æ—Ä–æ—à–∏–π', category: '–ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ' },
];

const categories = ['–≤—Å–µ', '–º–µ—Å—Ç–∞', '–µ–¥–∞', '–ø—Ä–æ—Ñ–µ—Å—Å–∏–∏', '–ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ', '–æ—Å–Ω–æ–≤–Ω—ã–µ', '–¥–µ–Ω—å–≥–∏', '–Ω–∞—É–∫–∞', '–ø—Ä–µ–¥–º–µ—Ç—ã'];

export default function VocabularyScreen() {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('–≤—Å–µ');
  const theme = useTheme();
  const scrollY = useRef(new Animated.Value(0)).current;

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º AnimatedHeader –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  const { headerComponent, contentPaddingTop } = AnimatedHeader({
    scrollY,
    arabicTitle: 'ŸÖŸÅÿ±ÿØÿßÿ™',
    title: 'üìö –°–ª–æ–≤–∞—Ä—å',
    subtitle: '–ò–∑—É—á–∞–π—Ç–µ –∞—Ä–∞–±—Å–∫–∏–µ —Å–ª–æ–≤–∞ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π',
  });

  const getCategoryColor = (category) => {
    const colors = {
      '–º–µ—Å—Ç–∞': '#10B981',
      '–µ–¥–∞': '#F59E0B',
      '–ø—Ä–æ—Ñ–µ—Å—Å–∏–∏': '#EF4444',
      '–ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ': '#8B5CF6',
      '–æ—Å–Ω–æ–≤–Ω—ã–µ': '#3B82F6',
      '–¥–µ–Ω—å–≥–∏': '#F97316',
      '–Ω–∞—É–∫–∞': '#06B6D4',
      '–ø—Ä–µ–¥–º–µ—Ç—ã': '#84CC16',
    };
    return colors[category] || theme.colors.primary;
  };

  const filteredVocabulary = vocabularyData.filter(word => {
    const matchesSearch = word.arabic.includes(searchQuery) || 
                         word.russian.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         word.transcription.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesCategory = selectedCategory === '–≤—Å–µ' || word.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  const renderWordItem = ({ item }) => (
    <Card style={styles.wordCard} mode="elevated" elevation={4}>
      <Card.Content style={styles.wordContent}>
        <View style={styles.wordHeader}>
          <Text variant="headlineSmall" style={styles.arabicWord}>
            {item.arabic}
          </Text>
          <Chip
            mode="flat"
            textStyle={styles.categoryChipText}
            style={[
              styles.categoryChip,
              { backgroundColor: getCategoryColor(item.category) + '20' }
            ]}
            textColor={getCategoryColor(item.category)}
          >
            {item.category}
          </Chip>
        </View>
        <Text variant="titleMedium" style={styles.transcription}>
          {item.transcription}
        </Text>
        <Text variant="titleLarge" style={styles.russianWord}>
          {item.russian}
        </Text>
      </Card.Content>
    </Card>
  );

  const renderCategoryChip = (category) => (
    <Chip
      key={category}
      mode={selectedCategory === category ? 'flat' : 'outlined'}
      selected={selectedCategory === category}
      onPress={() => setSelectedCategory(category)}
      style={[
        styles.filterChip,
        selectedCategory === category && { backgroundColor: theme.colors.primary + '20' }
      ]}
      textColor={selectedCategory === category ? theme.colors.primary : theme.colors.onSurface}
    >
      {category}
    </Chip>
  );

  return (
    <View style={styles.container}>
      {headerComponent}

      <Animated.View style={[styles.contentContainer, { paddingTop: contentPaddingTop }]}>
        <Surface style={styles.searchContainer} elevation={2}>
          <Searchbar
            placeholder="–ü–æ–∏—Å–∫ —Å–ª–æ–≤..."
            onChangeText={setSearchQuery}
            value={searchQuery}
            style={styles.searchBar}
            iconColor={theme.colors.primary}
          />
        </Surface>

        <Surface style={styles.filtersContainer} elevation={1}>
          <FlatList
            data={categories}
            renderItem={({ item }) => renderCategoryChip(item)}
            keyExtractor={(item) => item}
            horizontal
            showsHorizontalScrollIndicator={false}
            contentContainerStyle={styles.filtersContent}
          />
        </Surface>

        <FlatList
          data={filteredVocabulary}
          renderItem={renderWordItem}
          keyExtractor={(item) => item.id.toString()}
          contentContainerStyle={styles.listContainer}
          showsVerticalScrollIndicator={Platform.OS !== 'web'}
          style={styles.wordsList}
          onScroll={Animated.event(
            [{ nativeEvent: { contentOffset: { y: scrollY } } }],
            { useNativeDriver: false }
          )}
        />
      </Animated.View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8FAFC',
    paddingBottom: Platform.OS === 'web' ? 0 : 70, // –û—Ç—Å—Ç—É–ø –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
  },
  contentContainer: {
    flex: 1,
    padding: 20,
    paddingTop: 0, // –¢–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–Ω–∏–º–∞—Ü–∏–µ–π
  },
  searchContainer: {
    backgroundColor: '#FFFFFF',
    borderRadius: 20,
    marginBottom: 16,
    elevation: 2,
  },
  searchBar: {
    backgroundColor: 'transparent',
    elevation: 0,
  },
  filtersContainer: {
    backgroundColor: '#FFFFFF',
    borderRadius: 20,
    marginBottom: 20,
    paddingVertical: 8,
  },
  filtersContent: {
    paddingHorizontal: 16,
    gap: 8,
  },
  filterChip: {
    marginRight: 8,
  },
  wordsList: {
    flex: 1,
  },
  listContainer: {
    paddingBottom: 20,
  },
  wordCard: {
    marginBottom: 16,
    borderRadius: 20,
    backgroundColor: '#FFFFFF',
    shadowColor: '#6366F1',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
  },
  wordContent: {
    padding: 20,
  },
  wordHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  arabicWord: {
    color: '#4338CA',
    fontWeight: '800',
    textAlign: 'right',
    writingDirection: 'rtl',
    flex: 1,
  },
  categoryChip: {
    marginLeft: 12,
  },
  categoryChipText: {
    fontSize: 12,
    fontWeight: '600',
  },
  transcription: {
    color: '#8B5CF6',
    fontStyle: 'italic',
    marginBottom: 8,
    textAlign: 'center',
  },
  russianWord: {
    color: '#1E293B',
    fontWeight: '600',
    textAlign: 'center',
  },
}); 